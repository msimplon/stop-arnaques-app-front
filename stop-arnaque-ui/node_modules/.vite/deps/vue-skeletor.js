import {
  computed,
  defineComponent,
  h,
  inject,
  reactive,
  warn
} from "./chunk-3NMN3MUW.js";
import "./chunk-RSJERJUL.js";

// node_modules/vue-skeletor/dist/vue-skeletor.esm.js
function convertToUnit(str, unit = "px") {
  if (str == null || str === "") {
    return void 0;
  } else if (isNaN(str)) {
    return String(str);
  } else {
    return `${Number(str)}${unit}`;
  }
}
var SkeletorSymbol = Symbol();
var DEFAULT_OPTIONS = {
  shimmer: true
};
function useSkeletor() {
  const skeletor = inject(SkeletorSymbol, DEFAULT_OPTIONS);
  if (!skeletor) {
    warn("Skeletor is not installed on this Vue application.");
  }
  return skeletor;
}
var Skeletor = defineComponent({
  name: "Skeletor",
  props: {
    as: {
      type: String,
      default: "span"
    },
    circle: {
      type: Boolean,
      default: false
    },
    pill: {
      type: Boolean,
      default: false
    },
    size: {
      type: [String, Number],
      default: null
    },
    width: {
      type: [String, Number],
      default: null
    },
    height: {
      type: [String, Number],
      default: null
    },
    shimmer: {
      type: Boolean,
      default: void 0
    }
  },
  setup(props) {
    const skeletor = useSkeletor();
    const isRect = computed(() => !props.circle && (props.size || props.height));
    const isText = computed(() => !props.circle && !props.size && !props.height);
    const isShimmerless = computed(() => props.shimmer !== void 0 ? !props.shimmer : !skeletor.shimmer);
    const classes = computed(() => ({
      "vue-skeletor": true,
      "vue-skeletor--rect": isRect.value,
      "vue-skeletor--text": isText.value,
      "vue-skeletor--shimmerless": isShimmerless.value,
      "vue-skeletor--circle": props.circle,
      "vue-skeletor--pill": props.pill
    }));
    const style = computed(() => {
      const _style = {};
      if (props.size) {
        const size = convertToUnit(props.size);
        _style.width = size;
        _style.height = size;
      }
      if (!props.size && props.width) {
        _style.width = convertToUnit(props.width);
      }
      if (!props.size && props.height) {
        _style.height = convertToUnit(props.height);
      }
      return _style;
    });
    const children = isText.value ? "â€Œ" : null;
    return () => h(props.as, {
      class: classes.value,
      style: style.value
    }, [children]);
  }
});
var SkeletorPlugin = {
  install(app, options = {}) {
    app.provide(SkeletorSymbol, reactive({
      ...DEFAULT_OPTIONS,
      ...options
    }));
  }
};
var vue_skeletor_esm_default = SkeletorPlugin;
export {
  Skeletor,
  vue_skeletor_esm_default as default,
  useSkeletor
};
//# sourceMappingURL=vue-skeletor.js.map

import { inject, warn, defineComponent, computed, h, reactive } from 'vue';

function convertToUnit(str, unit = 'px') {
  if (str == null || str === '') {
    return undefined;
  } else if (isNaN(str)) {
    return String(str);
  } else {
    return `${Number(str)}${unit}`;
  }
}

const SkeletorSymbol = Symbol();
const DEFAULT_OPTIONS = {
  shimmer: true
};

function useSkeletor() {
  const skeletor = inject(SkeletorSymbol, DEFAULT_OPTIONS);

  if (!skeletor) {
    warn('Skeletor is not installed on this Vue application.');
  }

  return skeletor;
}

const Skeletor = defineComponent({
  name: 'Skeletor',
  props: {
    as: {
      type: String,
      default: 'span'
    },
    circle: {
      type: Boolean,
      default: false
    },
    pill: {
      type: Boolean,
      default: false
    },
    size: {
      type: [String, Number],
      default: null
    },
    width: {
      type: [String, Number],
      default: null
    },
    height: {
      type: [String, Number],
      default: null
    },
    shimmer: {
      type: Boolean,
      default: undefined
    }
  },

  setup(props) {
    const skeletor = useSkeletor();
    const isRect = computed(() => !props.circle && (props.size || props.height));
    const isText = computed(() => !props.circle && !props.size && !props.height);
    const isShimmerless = computed(() => props.shimmer !== undefined ? !props.shimmer : !skeletor.shimmer);
    const classes = computed(() => ({
      'vue-skeletor': true,
      'vue-skeletor--rect': isRect.value,
      'vue-skeletor--text': isText.value,
      'vue-skeletor--shimmerless': isShimmerless.value,
      'vue-skeletor--circle': props.circle,
      'vue-skeletor--pill': props.pill
    }));
    const style = computed(() => {
      const _style = {};

      if (props.size) {
        const size = convertToUnit(props.size);
        _style.width = size;
        _style.height = size;
      }

      if (!props.size && props.width) {
        _style.width = convertToUnit(props.width);
      }

      if (!props.size && props.height) {
        _style.height = convertToUnit(props.height);
      }

      return _style;
    });
    const children = isText.value ? '\u200C' : null;
    return () => h(props.as, {
      class: classes.value,
      style: style.value
    }, [children]);
  }

});

const SkeletorPlugin = {
  install(app, options = {}) {
    app.provide(SkeletorSymbol, reactive({ ...DEFAULT_OPTIONS,
      ...options
    }));
  }

};

export default SkeletorPlugin;
export { Skeletor, useSkeletor };
